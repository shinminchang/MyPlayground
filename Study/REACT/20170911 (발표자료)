* 발표자료

1. React.js 소개
   - 프레임워크가 아닌 라이브러리
     * 프레임워크 : 틀 (기본적으로 개발된게 있어서 이 틀에서 벗어나기가 힘듬)
     * 라이브러리 : 필요한곳에 가져다 쓰면 되는 개념
   - 리액트 : 유저인터페이스를 만들기위한 라이브러리
   - 리액트 네이티브 : 모바일 네이티브 앱을 리액트로 만들수 있음
   - 가상돔(Virtual DOM)을 사용
     * 가상돔
       1) HTML 돔의 추상화 개념
       2) 가볍고, 브라우저 스펙의 구현체와는 분리되어있다.

2. React.js 장점과 단점
   - 장점
     1) 배우기 간단하다.
     2) 뛰어난 garbage Collection
        * garbage collection : 동적으로 할당했던 메모리 영역 중에서 필요없게 된 영역을 해제하는 기능
     3) 서버(검색엔진 최적화) & 클라이언트 렌더링 지원
        * 서버 사이드 렌더링 : 데이터 요청 시 새로고침이 일어나며 페이지를 로딩할 때마다 서버로부터 리소스를 전달받아 해석하고 렌더링
        * 클라이언트 사이드 렌더링 : 서버는 단지 JSON 통신만 하고 html을 그리는 역할은 클라이언트 단에서 자바스크립트가 렌더링
     4) 간편한 UI 수정및 컴포넌트화를 통한 재사용
     5) 페이스북이 지원해줌
     6) 다른 프레임워크나 라이브러리와 혼용가능
   - 단점
     1) VIEW ONLY (데이터 모델링, 라우팅, AJAX를 지원하지않음)
     2) ie8 이하 지원 X (그러나 굳이 사용할려면 낮은 버전의 React와 호환 툴을 이용)

     20170908 (React.js Start)

3. React.js 시작하기
   1) React.js (컴포넌트)
   2) React-dom.js (렌더링)
   3) Babel (전처리기) - ES6 Type을 각 브라우저 별로 호환이 될 수 있도록 ES5 형태로 변환을 해줌
   3) ES6 type(class가 추가됨 - extends, constructor, static)

4 작업환경
  1) git
  2) NPM / NODE (Node는 서버단을 자바스크립트로 구현할수 있는 언어, NPM은 Node.js로 만들어진 모듈을 설치 및 버전관리 해주는 툴)
  3) MONGGODB
  4) EDITOR